import SwiftUI
import SwiftData

@main
struct MealRaterApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
                .modelContainer(for: Meal.self)
        }
    }
}

@model
class Meal {
    var id: Int?
    var restaurantName: String
    var dishName: String
    var rating: Int
    
    init(id: Int? = nil, restaurantName: String, dishName: String, rating: Int) {
        self.id = id
        self.restaurantName = restaurantName
        self.dishName = dishName
        self.rating = rating
    }
}

struct ContentView: View {
    var body: some View {
        NavigationView {
            RateMealView()
        }
    }
}

struct RateMealView: View {
    @Environment(\.modelContext) private var modelContext
    @State private var dishName: String = ""
    @State private var restaurantName = ""
    @State private var rating = 0
    @State private var isRatingScreenPresented = false
    @State private var selectedRating: Int? = nil
    
    var body: some View {
        VStack {
            TextField("Dish Name", text: $dishName)
                .padding(8)
                .border(Color.blue, width: 2)
                .cornerRadius(5)
                .frame(height: 1.0)
                .aspectRatio(contentMode: .fit)
                .frame(minHeight: 50)
            
            TextField("Restaurant Name", text: $restaurantName)
                .padding(8)
                .border(Color.blue, width: 2)
                .cornerRadius(5)
                .frame(height: 1.0)
                .aspectRatio(contentMode: .fit)
                .frame(minHeight: 50)
            
            Spacer().frame(minHeight: 16)
            
            if !dishName.isEmpty && !restaurantName.isEmpty {
                Button(action: {
                    isRatingScreenPresented = true
                }) {
                    Text("Rate Meal")
                        .font(.title)
                        .foregroundColor(.green)
                }
            }
            
            Spacer().frame(height: 16)
            
            Text("Rating: \(rating)")
                .padding(8)
                .font(.title2)
        }
        .padding(100)
        .navigationTitle("")
        .sheet(isPresented: $isRatingScreenPresented) {
            RateMealSubview(dishName: $dishName, restaurantName: $restaurantName, rating: $rating, isRatingScreenPresented: $isRatingScreenPresented)
        }
    }
}

struct RateMealSubview: View {
    @Binding var dishName: String
    @Binding var restaurantName: String
    @Binding var rating: Int
    @Binding var isRatingScreenPresented: Bool
    @State private var selectedRating: Int?
    
    @Environment(\.modelContext) private var modelContext
    
    var body: some View {
        VStack {
            Text("Rate the Meal")
                .font(.title)
                .padding(8)
            
            Spacer().frame(height: 16)
            
            HStack {
                ForEach(1..<6) { num in
                    Button(action: {
                        selectedRating = num
                    }) {
                        ZStack{
                            Rectangle()
                                .fill(num <= rating ? Color.yellow : Color.gray)
                                .frame(width: 25, height: 25)
                                .cornerRadius(8)
                            Text("\(num)")
                                .foregroundColor(.white)
                                .font(.headline)
                        }
                    }
                    .padding(4)
                }
            }
            
            HStack {
                Button(action: {
                    rating = 0
                    isRatingScreenPresented = false
                }) {
                    Text("Cancel")
                        .padding()
                        .background(Color.white)
                        .foregroundColor(.blue)
                }
                
                Spacer()
                
                Button(action: {
                    saveMeal()
                    isRatingScreenPresented = false
                }) {
                    Text("Save")
                        .padding()
                        .background(Color.white)
                        .foregroundColor(.blue)
                }
            }
            .padding(.horizontal, 50)
            .padding(.top, 20)
        }
        .padding(20)
    }
    
    private func saveMeal() {
        guard !dishName.isEmpty, !restaurantName.isEmpty else {
            return
        }
        
        let meal = Meal(restaurantName: restaurantName, dishName: dishName, rating: rating)
        
        do {
            try modelContext.save(meal)
        } catch {
            print("Error saving meal: \(error)")
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}



***********************************************************************************

import SwiftUI
import SwiftData

@main
struct MealRaterApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
        .modelContainer(for: Meal.self)
    }
}

struct ContentView: View {
    @State private var restaurantName = ""
    @State private var dishName = ""
    @State private var rating = 0
    
    var body: some View {
        VStack {
            TextField("Restaurant Name", text: $restaurantName)
                .padding()
            
            TextField("Dish Name", text: $dishName)
                .padding()
            
            Stepper(value: $rating, in: 0...5) {
                Text("Rating: \(rating)")
            }
            .padding()
            
            Button(action: {
                saveMeal()
            }) {
                Text("Save")
            }
            .padding()
        }
    }
    
    func saveMeal() {
        let meal = Meal(restaurantName: restaurantName, dishName: dishName, rating: rating)
        
        do {
            try meal.save()
            print("Meal saved successfully")
            // Optionally, you can clear the text fields after saving
            restaurantName = ""
            dishName = ""
            rating = 0
        } catch {
            print("Error saving meal: \(error.localizedDescription)")
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}


